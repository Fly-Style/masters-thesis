<!DOCTYPE html>
<html lang="en">
<head>
    <title>Shower Presentation Engine</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="shower/themes/ribbon/styles/styles.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/tonsky/FiraCode@1.206/distr/fira_code.css">
    <style>
        .shower {
            --slide-ratio: calc(16 / 9);
        }
        .slide {
            background : #fff3e5;
        }
        .slide code {
            font-family: "Fira Code", monospace
        }
        .slide blockquote {
            font-size: 2rem;
        }
        #telegram {
            font-family: "Fira Code", "Retina", monospace
        }
        #announcement {
            font-size: 5rem;
        }
    </style>
</head>
<body class="shower list">   
    <header class="caption">
        <h1>Shower Presentation Engine</h1>
    </header>

    <section class="slide" id="cover">
        <h2>Introduction to </h2>
        <h2>Virtual Machines</h2>
        <br>
        <p>by Alexander Syrotenko</p>
        <figure>
            <img class="cover" src="pictures/cover_.jpg" alt="Hands on the orange typewriter in a park">
        </figure>
        <style>

            #cover h2 {
                margin: 30px 0 0;
                color: white;
                text-align: center;
                font-size: 84px;
            }

            #cover p {
                margin: 10px 0 0;
                text-align: center;
                color: white;
                font-style: italic;
                font-size: 24px;
            }

            #cover p a {
                color: white;
            }
        </style>
    </section>

    <!-- SPEAKER -->
    <section class="slide">
        <h2>About speaker</h2>
        <ul id="speaker">
            <li>Masters student of Kyiv National University, cybernetics</li>
            <li class="next">Current employee of @Aeneas, ex-employee of SAP</li>
            <li class="next">C++, JavaScript, Scala/Java/Kotlin, sometimes Rust</li>
            <li class="next">Huge compliers, runtimes and formal verification fan</li>
            <li class="next">Sometimes making WASM bulk operations and GC in ChakraCore</li>
        </ul>
        <style>
            #speaker {
                font-size: 1.7rem;
                margin-top: 10px;      
            }    
        </style>
    </section>

    <section class="slide" id="agenda">
        <h2>Agenda</h2>
        <br>
    </section>
    <section class="slide" id="agenda">
        <h2><s>Agenda</s> Reasons</h2>
        <br>
        <ul>
            <li>Technical duty</li>
            <li>Reference creates a knowledge, knowledge creates an efficiency</li>
            <li>Interesting low-level technologies</li>
            <li>+1 well answer on your interview ðŸ˜‰ </li>
        </ul>
    </section>

    <!-- ABSTRACT -->
    <section class="slide" id="chapter">
        <h2>Abstract</h2>
        <style>
            #chapter h2 {
                font-size: 4em;
                color: gray;
            }
        </style>
    </section>

    <!-- ABSTRACT MACHINE -->
    <section class="slide">
        <figure>
            <br>
            <br>
            <br>
            <blockquote>
                <p>Each Virtual Machine is implementation of <b>abstract machine</b>  which is executed the code was written in specified language.</p>
            </blockquote>
        </figure>
    </section>

    <section class="slide">
        <h2 class="shout shrink" id="announcement">Execution unification</h2>
    </section>
    
    <!-- ABSTRACT MACHINE SPECIFICATIONS -->
    <section class="slide">
        <h2>Abstract machine specifications</h2>
        <br>
        <ul>
            <li>JavaScript VMs : ECMA-262 specification</li>
            <li>Java VMs : JVMS (Java Virtual Machine Specification) </li>
            <li>C# VMs : Common Language Runtime Specification</li>
            <li>Erlang VM : BEAM (BjÃ¶rn's Erlang Abstract Machine)</li>
        </ul>
    </section>

    <!-- ABSTRACT MACHINE IMPLEMENTATIONS -->
    <section class="slide">
        <h2>Abstract machine implementations</h2>
        <br>
        <ul>
            <li>JavaScript VMs : V8, ChakraCore, JSCore, SpiderMonkey, TeaVM, etc</li>
            <li>Java VMs : HotSpot, SAP Machine, Zing VM, Excelsior JET, Dalwik, etc </li>
            <li>C# VMs : CoreCLR, DotNetCore, Mono</li>
            <li>Erlang VM : BEAM</li>
        </ul>
    </section>

    <!-- INSIDES -->
    <section class="slide" id="chapter">
        <h2>VM insides</h2>
        <figure class="next">
            <img src="pictures/crap.png" alt="Oh my God" 
            style="display:block; width:475px; margin:0 auto;">
        </figure>
        <style>
            #chapter h2 {
                font-size: 4em;
                color: gray;
            }
        </style>
    </section>

    <!-- VM TYPE -->
    <section class="slide">
            <h2>Virtual Machines types</h2>
            <table>
                <tr>
                    <th scope="col">Stack-based VM</th>
                    <th scope="col">Register-based VM</th>
                </tr>
                <tr>
                    <td>Stack</th>
                    <td>A lot of virtual registers</td>
                </tr>
                <tr>
                    <!-- instruction pointer, frame pointer, stack pointer, local vars pointer -->
                    <td>Uses <b>ip</b>, <b>fp</b>, <b>sp</b> registers</td>
                    <td>Uses <b>ip</b>, <b>fp</b>, <b>sp</b>, <b>lp</b> registers</td>
                </tr>
                <tr>
                    <td>Bytecode uses stack as a data source</td>
                    <td>Data stores in virutal registers</td>
                </tr>
                <tr>
                    
                </tr>
            </table>
        </section>
    
    <!-- POINTERS -->
    <section class="slide">
        <figure style="margin-left : 100px;">
            <img src="pictures/stackpointer.png" 
                    alt="Example of stack with stack and frame pointers" 
                    style="width: 600px;height: 450px;">
        </figure>
    </section>
    
    <!-- VM TYPE IMPLEMENTATIONS -->
    <section class="slide">
        <h2>Virtual Machines types</h2>
        <table>
            <tr>
                <th scope="col">Stack-based VM</th>
                <th scope="col">Register-based VM</th>
            </tr>
            <tr>
                <td>JVM</th>
                <td>LLVM</td>
            </tr>
            <tr>
                <td>V8, ChakraCore, JSCore</th>
                <td>LuaJIT</td>
            </tr>
        </table>
    </section>

    <!-- MEMORY MANAGEMENT SYSTEM -->
    <section class="slide">
        <h2 class="shout shrink" id="announcement">Memory management system</h2>
    </section>

    <!-- MMS -->
    <section class="slide">
        <h2>Memory management system</h2>
        <br>
        <ul>
            <li style="font-size: 35px;">Allocator</li>
            <li style="font-size: 35px;">Garbage collector</li>
        </ul>
    </section>

    <!-- MEMORY MODEL -->
    <section class="slide">
        <h2>Memory model</h2>
        <ul>
            <li><b>Describes threads interaction through memory</b></li>
            <li>Clever words like 
                <ul>
                    <li>Program order of execution</li>
                    <li>Synchronous order of execution</li>
                    <li>Synchronizes-with relation</li>
                    <li>Happens-before relation</li>
                </ul>
            </li>
            <li class="next">ECMA-262 : Chapter 27.6 ðŸ˜²</li>
        </ul>
    </section>

    <!-- CODE EXECUTION PIPELINE -->
    <section class="slide">
        <h2 class="shout shrink" id="announcement">Source code execution pipeline</h2>
    </section>

    <!-- SOURCES INTERPRETER OR COMPILER -->
    <!-- TODO: add dynamic and static compilation -->
    <section class="slide">
        <h2>Source code to bytecode translator</h2>
        <ul>
            <li>Lexer</li>
            <li>Parser (could be concurrent)</li>
            <li>AST builder</li>
            <li>AST phase optimizer</li>
            <li>Bytecode generator / emitter</li>
            <li class="next">SSA-form builder, if <b>register-based</b></li>
        </ul>
    </section>
    
    <!-- BYTECODE EXECUTOR -->
    <section class="slide">
        <h2>Bytecode verifier & executor</h2>
        <ul>
            <li><b>Bytecode verifier</b>
                <ul>
                    <li>Proves if generated bytecode is valid by specification</li>
                    <li>The easiest implementation detail in VM ;) </li>
                </ul>
            </li>
            <br>
            <li class="next"><b>Bytecode executor</b>
                <ul>
                    <li>Executes bytecode if no optimizations required</li>
                    <li>Collects execution profiling data</li>
                </ul>
            </li>
        </ul>
    </section>

    <!-- JUST-IN-TIME COMPILER -->
    <section class="slide">
        <h2>Just in time (JIT) compiler</h2>
        <br>
        <ul>
            <li><b>Dynamically optimizes bytecode</b>
                <ul>
                    <li>The reason why JS is so fast</li>
                    <li>Makes simple optimizations like constant propagation/folding, etc</li>
                    <li>Makes strong optimizations like escape analysis and methods inlining</li>
                    <li>Provides speculative optimizations like branch prediction, etc</li>
                </ul>
            </li>
        </ul>
    </section>

    <!-- JUST-IN-TIME COMPILER (2) -->
    <section class="slide">
        <h2>JIT compiler trade-offs</h2>
        <br>
        <ul>
            <li>Decreases latency of execution, but increase memory footprint</li>
            <li>Provides trade-off between optimizations quiality and execution start</li>
            <li>Provides deoptimizations if required</li>
        </ul>
    </section>
    
    <!-- MACHINE CODE GENERATOR -->
    <section class="slide">
        <h2>Machine code generator (part of JIT)</h2>
        <br>
        <ul>
            <li>Executes machine-dependent optimizations</li>
            <li>Transforms optimized bytecode to the Control Flow Graph</li>
            <li>Generates final assembly instructions from CFG</li>
        </ul>
    </section>

    <!-- NATIVE INTERFACE & CLASSLOADER -->
    <section class="slide">
        <h2 class="shout shrink" id="announcement">Native interface & Classloader</h2>
     </section>

    <!-- NI & CL SHORT OVERVIEW -->
    <!-- %methodName() -> special syntax for native information -->
    <section class="slide">
        <ul>
            <li><b>Native interface</b>
                <ul>
                    <li>Provides interface for hardware devices access, like GPU</li>
                    <li>Allows direct offheap allocations</li>
                    <li>Sometimes it is a secret door to black magic ðŸ˜ˆðŸ˜ˆðŸ˜ˆ</li>
                </ul>
            </li>
            <br>
            <li class="next"><b>Classloader</b>
                <ul>
                    <li>Contains in VMs with staticly typed target language</li>
                    <li>Loads and stores metainformation about data structures</li>
                    <li>Big plus : allows effective allocation strategies</li>
                </ul>
            </li>
        </ul>
    </section>

    <!-- JS VM -->
    <section class="slide" id="chapter">
        <h2>JavaScript VM's</h2>
        <figure class="next">
            <img src="pictures/js-i-smell.jpg" style="display:block; width:475px; margin:0 auto;">
        </figure>
        <style>
            #chapter h2 {
                font-size: 4em;
                color: gray;
            }
        </style>
    </section>

    <!-- Playground -->
    <section class="slide" id="code">
        <h2>Code samples</h2>
        <pre>
            <code>$ npm i -g <mark>jsvu</mark></code>
            <code>$ jsvu </code>
            <code>$ v8 </code>
            <code>$ spidermonkey </code>
            <code>$ chakra </code>
            <code>$ jsc </code>
        </pre>
    </section>

    <section class="slide">
        <h2>Ecpecial properties of JS VM</h2>
        <br>
        <br>
        <ul>
            <li>They have separare bytecode interpreter and one (or more) JIT</li>
            <li>They make very desperate optimizations about type predictions</li>
            <li>Deoptimize bytecode if type predictions turns out to be wrong</li>
        </ul>
    </section>

    <!-- V8 VM -->
    <section class="slide">
        <h2>V8</h2>
        <figure class="next">
            <img src="pictures/v8.png" style="display:block; margin:0 auto;">
        </figure>
    </section>

     <!-- SPIDERMONKEY VM -->
    <section class="slide">
        <h2>SpiderMonkey</h2>
        <figure class="next">
            <img src="pictures/sm.png" style="display:block; margin:0 auto;">
        </figure>
    </section>

     <!-- CHAKRA VM -->
     <section class="slide">
        <h2>ChakraCore</h2>
        <figure class="next">
            <img src="pictures/ch.png" style="display:block; margin:0 auto;">
        </figure>
    </section>
     
    <!-- JSCore -->
    <section class="slide">
        <h2>JavaScriptCore</h2>
        <figure class="next">
            <img src="pictures/jsc.png" style="display:block; margin:0 auto;">
        </figure>
    </section>

    <section class="slide">
        <h2>Conclusion</h2>
        <br>
        <ul>
            <li>Any VM is an implementation of specified abstract machine</li>
            <li>JIT is the reason why JS gains big speedup a few years ago</li>
            <li>It is good to know a weak sides of your low-level code executor</li>
            <li>Knowledge is power!</li>
        </ul>
    </section>

    <section class="slide" id="see-more">
        <h2 class="shout">
            <img src="pictures/telegram.png" alt="Telegram logo" style="width: 150px; height: 150px;">
            <div id="telegram">@flystyle</div>
        </h2>
        <style>
            #see-more h2 {
                font-size: 60px
            }

            #see-more img {
                width: 0.72em;
                height: 0.72em;
            }
        </style>
    </section>

    <section class="slide" id="see-more">
        <h2 class="shout">
            <img src="pictures/twitter.png" alt="Telegram logo" style="width: 200px; height: 150px;">
            <div id="telegram">@FlyCreat1ve</div>
        </h2>
    </section>
    
    <section class="slide" id="see-more">
        <h2 class="shout">
            <div>Thank you!</div>
        </h2>
        <style>
            #see-more h2 {
                font-size: 72px
            }

            #see-more img {
                width: 0.72em;
                height: 0.72em;
            }
        </style>
    </section>

    <footer class="badge">
        <a href="https://github.com/shower/shower">Fork me on GitHub</a>
    </footer>

    <div class="progress"></div>

    <script src="shower/shower.min.js"></script>
    <!-- Copyright Â© 2018 Alexander Syrotenko -->

</body>
</html>
